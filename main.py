from loguru import logger
import requests
from aiogram import Bot, Dispatcher, executor, types
from config import telegram_api_key, openweathermap_APIKEY

bot = Bot(token=telegram_api_key)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    user = message.from_user
    await message.answer(f'üå§ –ü—Ä–∏–≤–µ—Ç {user.first_name}, —è –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.\n'
                         'üîé –ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')


@dp.message_handler()
async def get_city(message: types.Message):
    city = message.text
    city_cods = get_city_cords(city)
    if city_cods == 'Server Error':
        await message.answer('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
    else:
        lat = city_cods[0]
        lon = city_cods[1]
        wtr_in_user_city = get_weather_now(lat, lon)
        if wtr_in_user_city == 'Server Error':
            await message.answer('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        else:
            wtr_desc = f"‚õÖ {wtr_in_user_city['weather'][0]['description']}"
            wtr_desc = str(wtr_desc).capitalize()
            wtr_temp = f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(int(wtr_in_user_city['main']['temp']))}¬∞C.\n" \
                       f"    üî∏ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(int(wtr_in_user_city['main']['feels_like']))}¬∞C"
            wtr_temp_min = f"    üî∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–∞—Ä–∞—Ç—É—Ä–∞: {round(int(wtr_in_user_city['main']['temp_min']))}¬∞C"
            wtr_temp_max = f"    üî∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–∞—Ä–∞—Ç—É—Ä–∞: {round(int(wtr_in_user_city['main']['temp_max']))}¬∞C."
            wtr_pressure = f"üå± –î–∞–≤–ª–µ–Ω–∏–µ: {wtr_in_user_city['main']['pressure']} hPa"
            wtr_humidity = f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {wtr_in_user_city['main']['humidity']}%"
            wtr_visibility = f"üå´ –í–∏–¥–∏–º–æ—Å—Ç—å: {wtr_in_user_city['visibility']}–º"
            wtr_wind_speed = f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wtr_in_user_city['wind']['speed']}–º\—Å"
            mes_title = f'üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:'
            await message.answer(f'{mes_title}\n'
                                 f'{wtr_desc}\n'
                                 f'{wtr_temp}\n'
                                 f'{wtr_temp_max}\n'
                                 f'{wtr_temp_min}\n'
                                 f'{wtr_pressure}\n'
                                 f'{wtr_humidity}\n'
                                 f'{wtr_visibility}\n'
                                 f'{wtr_wind_speed}\n')
            wth_today = get_today_weather(lat, lon)
            await message.answer(f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞:\n'
                                 f'‚è± {wth_today["list"][0]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][0]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][1]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][1]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][2]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][2]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][3]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][3]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][4]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][4]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][5]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][5]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][6]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][6]["main"]["temp"]))}¬∞C\n'
                                 f'‚è± {wth_today["list"][7]["dt_txt"]}:'
                                 f' üå° {round(int(wth_today["list"][7]["main"]["temp"]))}¬∞C\n'
                                 )


def get_city_cords(city):
    cords_req_url = f'http://api.openweathermap.org/geo/1.0/direct?q={city}&appid={openweathermap_APIKEY}'
    req = requests.get(cords_req_url)
    if req.status_code == 200:
        req = req.json()
        lat = req[0]['lat']
        lon = req[0]['lon']
        return [lat, lon]
    else:
        return 'Server Error'


def get_weather_now(lat, lon):
    get_weather_url = f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}' \
                      f'&units=metric&appid={openweathermap_APIKEY}&lang=ru'
    req = requests.get(get_weather_url)
    if req.status_code == 200:
        req = req.json()
        return req
    else:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–≥–æ–¥–æ–π')
        return 'Server Error'


def get_today_weather(lat, lon):
    url = f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={openweathermap_APIKEY}' \
          f'&units=metric&cnt=8&lang=ru'
    req = requests.get(url)
    if req.status_code == 200:
        req = req.json()
        return req
    else:
        return 'Server Error'


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
